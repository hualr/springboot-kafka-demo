server:
  port: 8080

spring:
  kafka:
    bootstrap-servers:
      - 101.201.67.114:9092
    # 生产者
    producer:
      # 设置大于0的值，则客户端会将发送失败的记录重新发送
      retries: 3
      # 批量大小
      batch-size: 16384
      # 生产端缓冲区大小
      buffer-memory: 33554432
      # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

    # 消费者
    consumer:
      # 默认的消费组ID
      # 是否自动提交offset
      enable-auto-commit: false
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

    listener:
      # 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交           RECORD
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交   BATCH
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交  TIME
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交  COUNT
      # TIME | COUNT 有一个条件满足时提交    COUNT_TIME
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交  MANUAL
      # 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种  MANUAL_IMMEDIATE
      ack-mode:  manual_immediate